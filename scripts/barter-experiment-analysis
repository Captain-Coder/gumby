#!/bin/bash
# Mircea Bardac, 2011

if test $# -ne 2; then
    echo "Usage: $0 <experiment-config> <peers-directory>"
    exit 1
fi

BRANCH=$(pwd)

# expand experiment config filename to full path
cfg_name=$(basename $1)
cfg_path=$(dirname $1)
cd $cfg_path
cfg_path=$(pwd)
EXPERIMENT_CONFIG=$cfg_path/$cfg_name
source $EXPERIMENT_CONFIG

PEERS_DIRECTORY=$2
mkdir -p $PEERS_DIRECTORY/output/
STATS_FILE=$PEERS_DIRECTORY/output/statistics.txt
> $STATS_FILE

echo "* Looking for errors printed on stderr..."
cd $PEERS_DIRECTORY/control

find . -regextype posix-egrep -regex '\./node.*\/output/[0-9]{5}\.err' | while read peer_file; do
    if test $(cat $peer_file | wc -l) -ne 0; then
        echo "*** $peer_file ***"
        cat $peer_file
        echo
    fi
done

echo "* Looking for errors and warnings on stdout..."
err_count=$(find . -regextype posix-egrep -regex '\./node.*\/output/[0-9]{5}\.out' | xargs cat | grep ^E | wc -l)
warn_count=$(find . -regextype posix-egrep -regex '\./node.*\/output/[0-9]{5}\.out' | xargs cat | grep ^W | wc -l)
echo "  * Errors: $err_count"
echo "  * Warnings: $warn_count"

NODE_COUNT=$(find . -type d -name 'node*' | wc -l)

cd $PEERS_DIRECTORY/

echo "* Counting number of peers that were executed..."
PEERS_COUNT=$(cat peer.count)
actual_count=$(find . -regextype posix-egrep -regex '\./[0-9]{5}\/output\/barter\.log' | wc -l)

if test $actual_count -ne $PEERS_COUNT; then
    echo
    echo "!!! ERROR !!!"
    echo "!!! We have counted $actual_count peers (expected $PEERS_COUNT peers). !!!"
fi

PEERS_PER_NODE=$[ $PEERS_COUNT / $NODE_COUNT ]

echo "* Counting number of delayed cycles (too much to process within a cycle)..."
c_ratio=0.0
t_cycles="(not-counted)"
d_cycles=$(find . -name 'barter.log' -exec cat {} \; | grep -e 'sleep[ ]*desync:f' | grep 'diff:f-' | wc -l)
if test $d_cycles -gt 0; then
    echo "  * Counting number of total cycles..."
    t_cycles=$(find . -name 'barter.log' -exec cat {} \; | grep -e 'sleep[ ]*desync:f' | wc -l)
    c_ratio=$(echo "scale=2; 100*${d_cycles}/${t_cycles}" | bc -l)
    echo "  * Delayed cycles: ${d_cycles}/${t_cycles} (${c_ratio}%)"
    sleep 2
fi

echo "* Extracting statistics..."
cd $BRANCH
./barter-extract-statistics $PEERS_DIRECTORY ${MESSAGESTOPLOT}

svn_version=$(cat $PEERS_DIRECTORY/output/svn_version.txt)

echo "* Done"
echo
(
cat <<END-OF-MSG
Peers: $PEERS_COUNT
Nodes: $NODE_COUNT
Peers per node: $PEERS_PER_NODE
Total cycles: $t_cycles
Delayed cycles: $d_cycles
Delayed cycles ratio: $c_ratio
Svn version: $svn_version
END-OF-MSG
) >> $STATS_FILE

cat $PEERS_DIRECTORY/output/measure_info.txt >> $STATS_FILE
rm $PEERS_DIRECTORY/output/measure_info.txt

echo "=== Report ==="
cat $STATS_FILE
echo "=== end report ==="
echo