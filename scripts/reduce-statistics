#!/usr/bin/env python
import sys
import os
from math import ceil

def reduce(base_directory, nrlines, inputfile, outputfile):
    inputfile = os.path.join(base_directory, inputfile)
    outputfile = os.path.join(base_directory, outputfile)
    
    if os.path.exists(inputfile):
        print >> sys.stderr, base_directory, inputfile, outputfile
        
        ifp = open(inputfile, 'r')
        ofp = open(outputfile, 'w')
    
        lines = ifp.readlines()
        print >> ofp, lines[0][:-1]
    
        lines = lines[1:]
        if len(lines) > nrlines:
            nrlines_to_merge = int(ceil(len(lines)/float(nrlines)))
            print >> sys.stderr, "%s has %d lines, reducing to %d lines"%(inputfile, len(lines), nrlines)
    
            max_time = None
            to_be_merged_parts = None
            for i, line in enumerate(lines):
                parts = line.split()
                max_time = max(float(parts[0]), max_time)
    
                parts = map(float, parts[1:])
                if not to_be_merged_parts:
                    to_be_merged_parts = [[]]* len(parts)
    
                for j, part in enumerate(parts):
                    to_be_merged_parts[j].append(part)
    
                if (i > 0 and i % nrlines_to_merge == 0) or (i + 1 == len(lines)):
                    print >> ofp, max_time,
    
                    for j, parts in enumerate(to_be_merged_parts):
                        mean = sum(parts)/float(len(parts))
                        print >> ofp, mean,
    
                        to_be_merged_parts[j] = []
    
                    print >> ofp, ''
    
        else:
            for line in lines:
                print >> ofp, line[:-1]
    
        ifp.close()
        ofp.close()

def main(peers_directory, nrlines):
    for filename in ['send', 'send_diff', 'received', 'received_diff', 'dropped', 'dropped_diff', 'utimes', 'stimes', 'wchars', 'rchars', 'writebytes', 'readbytes', 'vsizes', 'utimes_node', 'stimes_node', 'wchars_node', 'rchars_node', 'writebytes_node', 'readbytes_node', 'vsizes_node']:
        reduce(peers_directory, nrlines, '%s.txt'%filename, '%s_reduced.txt'%filename)
    
    total_connections = 1
    while os.path.exists(os.path.join(peers_directory, 'output/total_connections_%d.txt'%total_connections)):
        reduce(peers_directory, nrlines, 'total_connections_%d.txt'%total_connections, 'total_connections_%d_reduced.txt'%total_connections)
        total_connections +=1

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print "Usage: %s <peers-directory> <nr-of-lines-to-output>" %(sys.argv[0])
        print >> sys.stderr, sys.argv

        exit(1)
    
    main(sys.argv[1], int(sys.argv[2]))